using Reline.Compilation.Binding;
using Reline.Compilation.Diagnostics;
using Reline.Compilation.Syntax;

namespace Reline.Compilation.Symbols;

/// <summary>
/// Represents a tree of symbol nodes
/// and semantic information generated by a
/// <see cref="Binder"/>.
/// </summary>
public sealed class SemanticModel : ISemanticContext {

	private readonly ParentMap<ISymbol> parentMap;



	/// <summary>
	/// The <see cref="Syntax.SyntaxTree"/> which
	/// the semantic model was generated from.
	/// </summary>
	public SyntaxTree SyntaxTree { get; }
	/// <summary>
	/// The root symbol node.
	/// </summary>
	public ProgramSymbol Root { get; }
	/// <summary>
	/// The declared labels in the program.
	/// </summary>
	public ImmutableArray<LabelSymbol> Labels { get; }
	/// <summary>
	/// The declared variables in the program.
	/// </summary>
	public ImmutableArray<IVariableSymbol> Variables { get; }
	/// <summary>
	/// The functions in the program, both native and declared.
	/// </summary>
	public ImmutableArray<IFunctionSymbol> Functions { get; }
	/// <summary>
	/// The diagnostics generated during binding.
	/// </summary>
	public ImmutableArray<Diagnostic> Diagnostics { get; }



	// Where are required properties when you need them?
	internal SemanticModel(
		SyntaxTree syntaxTree,
		ProgramSymbol root,
		ImmutableArray<Diagnostic> diagnostics,
		ImmutableArray<LabelSymbol> labels,
		ImmutableArray<IVariableSymbol> variables,
		ImmutableArray<IFunctionSymbol> functions
	) {
		parentMap = new(root);
		SyntaxTree = syntaxTree;
		Root = root;
		Labels = labels;
		Variables = variables;
		Functions = functions;
		Diagnostics = diagnostics;
	}



	/// <summary>
	/// Binds a <see cref="Syntax.SyntaxTree"/> into a <see cref="SemanticModel"/>.
	/// </summary>
	/// <param name="syntaxTree">The <see cref="Syntax.SyntaxTree"/> to bind.</param>
	/// <returns>A new <see cref="SemanticModel"/>.</returns>
	public static SemanticModel BindTree(SyntaxTree syntaxTree) =>
		Binder.BindTree(syntaxTree);

	/// <summary>
	/// Gets the parent node of a specified <see cref="ISymbol"/>.
	/// </summary>
	/// <param name="symbol">The <see cref="ISymbol"/>
	/// to get the parent of.</param>
	/// <returns>The parent of <paramref name="symbol"/>, or <see langword="null"/>
	/// if the node is the root of the symbol tree.</returns>
	public ISymbol? GetParent(ISymbol symbol) =>
		parentMap.GetParent(symbol);

}

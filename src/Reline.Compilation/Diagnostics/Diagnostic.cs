namespace Reline.Compilation.Diagnostics;

/// <summary>
/// Represents a diagnostic generated by compilation.
/// </summary>
public readonly record struct Diagnostic {

	/// <summary>
	/// The span in the source text of the diagnostic,
	/// or <see langword="null"/> if the diagnostic does not have a specific location.
	/// </summary>
	public TextSpan? Location { get; }
	/// <summary>
	/// The formatted description of the diagnostic.
	/// </summary>
	public string Description { get; } = "No description";
	/// <summary>
	/// The severity level of the diagnostic.
	/// </summary>
	public DiagnosticLevel Level => InternalDescription.Level;
	/// <summary>
	/// The unique error code of the diagnostic type.
	/// </summary>
	public string ErrorCode => InternalDescription.ErrorCode;
	/// <summary>
	/// The <see cref="DiagnosticDescription"/> this diagnostic was created from.
	/// </summary>
	public DiagnosticDescription InternalDescription { get; }



	private Diagnostic(DiagnosticDescription description, TextSpan? location, string formattedDescription) {
		Location = location;
		Description = formattedDescription;
		InternalDescription = description;
	}



	/// <summary>
	/// Creates a new <see cref="Diagnostic"/>.
	/// </summary>
	/// <param name="description">The description of the diagnostic.</param>
	/// <param name="location">The span of the diagnostic in the source text.</param>
	/// <param name="formatArgs">The arguments to format the description with.</param>
	/// <returns>A new <see cref="Diagnostic"/>.</returns>
	public static Diagnostic Create(DiagnosticDescription description, TextSpan? location, params object?[] formatArgs) {
		string formattedDescription = description.FormatDescription(formatArgs);
		return new Diagnostic(description, location, formattedDescription);
	}

	/// <summary>
	/// Formats the diagnostic as a string.
	/// </summary>
	public override string ToString() =>
		$"{ErrorCode}: {Description}";
	public bool Equals(Diagnostic other) =>
		InternalDescription.Equals(other.InternalDescription) &&
		(Location?.Equals(other.Location) ?? other.Location is null) &&
		Description == other.Description;
	public override int GetHashCode() =>
		HashCode.Combine(InternalDescription, Location, Description);

}
